---
title: Sierpiński
date: 2022-05-19T13:00:00
tags: [processing]
description: Réalisation du triangle de Sierpiński
image_url: 

layout: session
---


# {title}

Lors de cette session, nous avons réalisé la fractale de Sierpiński, un emboitement de triangles très facile à réaliser.

## Algorithme

Pour réaliser cette fractale, il faut :

  1. Choisir trois points idéalement équidistants pour faire un triangle isocèle, mais ce n'est pas obligatoire.
    1. Pour cela, nous avons choisi trois points aléatoires dans le canevas.
  2. On commence sur un des points
  3. Repeter inddefiniment:
    1. Choisir un des points du triangle
    2. se déplacer à l'emplacement entre l'emplacement actuel et le point sélectionné
    3. peindre le pixel à la position actuelle

## Code

```java
PVector pointA;
PVector pointB;
PVector pointC;

PVector p;

void setup() {
  size(400, 400);
  pointA = new PVector(
    random(0, width),
    random(0, height)
    );
  pointB = new PVector(
    random(0, width),
    random(0, height)
    );
  pointC = new PVector(
    random(0, width),
    random(0, height)
    );

  p = new PVector(
    pointA.x,
    pointA.y
    );
}

void draw() {
  strokeWeight(5);
  point(pointA.x, pointA.y);
  point(pointB.x, pointB.y);
  point(pointC.x, pointC.y);

  strokeWeight(1);

  for (int i = 0; i < 100; i++) {
    point(p.x, p.y);

    int choice = round(random(3));
    if (choice == 0) p = p.lerp(pointA, 0.75);
    if (choice == 1) p = p.lerp(pointB, 0.75);
    if (choice == 2) p = p.lerp(pointC, 0.75);
  }
}
```
